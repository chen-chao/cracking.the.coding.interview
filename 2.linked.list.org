* Linked List

C version linked list:
  
#+BEGIN_SRC C :tangle linkedlist.c
  #include <stdlib.h>

  struct linkedList {
      int label;
      struct linkedList *next;
  };

  struct linkedList *lookup(struct linkedList *list, int label) {
      for (; list != NULL && list->label != label; list = list->next)
          ;
      return list;
  }

  struct linkedList *add(struct linkedList *list, int label) {
      struct linkedList *node;
      node = lookup(list, label);
      if (node == NULL) {
          node = (struct linkedList *) malloc(sizeof(*node));
          node->label = label;
          node->next = list;
      }
      return node;
  }

  struct linkedList *append(struct linkedList *list, int label) {
      if (list == NULL) {
          list = add(list, label);
      } else if (list->label != label) {
          struct linkedList *node = list;
          for (; node->next != NULL; node = node->next)
              ;
          if (node->next == NULL) {
              node->next = add(node->next, label);
          }
      }
      return list;
  }

  struct linkedList *del(struct linkedList *list, int label) {
      if (list->label == label) {
          return list->next;
      }
      for (; list->next != NULL; list = list->next) {
          if (list->next->label == label) {
              list->next = list->next->next;
          }
      }
      return list;
  }

#+END_SRC

Python version linked list:

#+BEGIN_SRC python :tangle linkedlist.py
  class node:
      def __init__(self, label, next=None):
          self.label = label
          self.next = next
      def __str__(self):
          return str(self.label)

  class linkedlist:
      def __init__(self):
          self.head = None

      def add(self, label):
          self.head = node(label, self.head)

      def is_empty(self):
          return self.head == None

      def append(self, label):
          head = self.head
          if not head:
              self.add(label)
          else:
              while head.next != None:
                  head = head.next
              head.next = node(label)

      def reverse(self):
          prev = None
          cur = self.head
          while cur:
              next = cur.next 
              cur.next = prev
              prev = cur
              cur = next
          self.head = prev
      
      def __add__(self, other):
          if self.head is None:
              self.head = other.head 
              return
          tail = self.head
          while tail.next:
              tail = tail.next 
          tail.next = other.head

      def lookup(self, label):
          head = self.head
          while head != None and head.label != label:
              head = head.next
          return head

      def delete(self, label):
          if self.head.label == label:
              self.head = self.head.next
          else:
              head = self.head
              while head.next != None:
                  if head.next.label == label:
                     head.next = head.next.next 
                     break
                  head = head.next

      def __eq__(self, other):
          cur1 = self.head
          cur2 = other.head
          while cur1 and cur2: 
              if cur1.label != cur2.label:
                  return False
              cur1 = cur1.next
              cur2 = cur2.next
          return cur1 is None and cur2 is None

      def __str__(self):
          head = self.head
          s = ''
          while head != None:
              s += '%s->'%str(head.label) 
              head = head.next
          s += 'None'
          return s
          
  if __name__ == '__main__':
      foo = linkedlist()
      bar = linkedlist()
      for i in range(1, 10):
          foo.append(i)
          bar.add(i)
      print('foo: %s'%str(foo))
      print('bar: %s'%str(bar))
      print('foo == bar ? ', end='')
      print(foo == bar)
      foo.reverse()
      print('reverse foo: %s'%str(foo))
      print('foo == bar ? ', end='')
      print(foo == bar)

      head = foo.lookup(6)
      print('6 in foo: %s'%str(head))

      foo.delete(4)
      print('foo delete 4: %s'%str(foo))
#+END_SRC


- Write code to remove duplicates in an unsorted linked list. FOLLOW
  UP: How would you solve this problem if a temporary buffer is not
  allowed?
  
Solution: Use a buffer array if the value is hashable. If a temporary
buffer is not allowed, brute force comparison takes O(n^2) complexity.

- Implement an algorithm to find the nth element to last element of a
  singly linked list.
  
Solution: Use the slow and fast pointers trick. Fast pointer moves n
position ahead of the slow pointer. When the fast pointer reaches the
end, the slow pointer reaches the nth element to the end. Note NULL is
not the last element.

Code:
#+BEGIN_SRC C
struct linkedList *getNthNodeToEnd(struct linkedList *head, int n) {
    /* NULL is not the last element */ 
    struct linkedList *slow, *fast;
    for (fast = head; fast != NULL && n >= 0; fast = fast->next, n--)
        ;
    if (n >= 0) {
        return NULL;
    }
    for (slow = head; fast != NULL; fast = fast->next, slow = slow->next) 
        ;
    return slow; 
}
#+END_SRC

- Implement an algorithm to delete a node in the middle of a singly
  linked list, given only access to that node. 
  EXAMPLE: 
  Input: the node 'c' from the linked list: a->b->c->d->e
  Result: nothing is returned, but the new linked list looks like a->b->d->e

Solution: Replace the current node with the next node.

Code:
#+BEGIN_SRC C
void deleteCurrentNode(struct linkedList *current) {
   if (current != NULL) {
       current = current->next;
   }
}
#+END_SRC

- You have two numbers represented by a linked list, where each node
  contains a single digit. The digits are stored in reverse order,
  such that the 1’s digit is at the head of the list. Write a function
  that adds the two numbers and returns the sum as a linked list.
  EXAMPLE
  Input: (3 -> 1 -> 5) + (5 -> 9 -> 2)
  Output: 8 -> 0 -> 8
  
Solution: Iterate over the list and sum the node values with carries.

Code:
#+BEGIN_SRC C
  struct linkedList *sumLinkedList(struct linkedList *l, struct linkedList *s) {
      struct linkedList *sum;
      int value, svalue, lvalue;
      int carry = 0;
      for (; l != NULL || s != NULL; l = l->next, s = s->next) {
          svalue = s == NULL ? 0 : s->label;
          lvalue = l == NULL ? 0 : l->label;
          value = svalue + lvalue + carry;
          value = value > 9 ? value-10 : value;
          carry = value > 9 ? 1 : 0;
          sum = add(sum, value);
      }
      return sum;
  }
#+END_SRC


- Given a circular linked list, implement an algorithm which returns
  node at the beginning of the loop.
  DEFINITION
  Circular linked list: A (corrupt) linked list in which a node’s next
  pointer points to an earlier node, so as to make a loop in the
  linked list.
  EXAMPLE
  input: A -> B -> C -> D -> E -> C [the same C as earlier]
  output: C

Solution: Use slow and fast pointers trick. The fast pointer
moves twice faster than the slow pointer. In a circular linked list,
the slow and faster pointer will meet at a circular node. The
difference between steps is a multiple of the circular length, and the
remaining steps in the circular is the length of the non-circular
head.

Code:
#+BEGIN_SRC C
  struct linkedList * getFirstCircularNode(struct linkedList *clist) {
      struct linkedList *slow, *fast;
      slow = clist;
      fast = clist;
      while (slow != NULL && fast != NULL) {
          slow = slow->next;
          fast = fast->next;
          if (fast != NULL) {
              fast = fast->next;
          } else {
              return NULL;
          }
          if (slow == fast) {
              break;
          }
      }
      if (slow == NULL || fast == NULL) {
          return NULL;
      }
      while (clist != slow) {
          clist = clist->next;
          slow = slow->next;
      }
      return slow;
  }
#+END_SRC

